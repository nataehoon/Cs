@page "/Board/{boardtype}"

<h3>Board</h3>
<br />
<div style="display:flex;justify-content:flex-end">
    <button type="button" class="btn btn-primary" @onclick="@(() => navigationManager.NavigateTo("/boardform/" + boardtype + "/" +id))">글쓰기</button>
</div>
<br />
<table class="table" border="1">
    <thead>
        <tr>
            <th style="width:60%">글제목</th>
            <th style="width:15%;text-align:center">작성자</th>
            <th style="width:10%;text-align:center">추천수</th>
            <th style="width:10%;text-align:center">등록일</th>
            <th style="width:15%;text-align:center">조회수</th>
        </tr>
    </thead>
    <tbody>
        @if(boards != null){
            @foreach (var item in boards)
            {
                <tr>
                    <td style="cursor:pointer" @onclick="@(() => navigationManager.NavigateTo("/boarddetail/"+ item.Bono))">@item.Title</td>
                    <td align="center">@item.Id</td>
                    <td align="center">@item.Recommend</td>
                    <td align="center">@item.Regdate.ToShortDateString().Substring(5)</td>
                    <td align="center">@item.Readhit</td>
                </tr>
            }
        }
    </tbody>
</table>
<div>
    <EditForm Model="board" OnSubmit="SearchKeyword">
        <div style="float:right">
            <button type="submit" class="btn btn-secondary">검색</button>
        </div>
        <div style="float:right">
            <InputText id="search" @bind-Value="@content" class="form-control"></InputText>
        </div>
        <div style="float:right">
            <InputSelect id="category" @bind-Value="category">
                <option value="subject" selected>제목</option>
                <option value="content">내용</option>
                <option value="user">작성자</option>
                <option value="subcont">제목 + 내용</option>
            </InputSelect>
        </div>
    </EditForm>
</div>


@code {
    [Parameter]
    public string? id { get; set; }
    [Parameter]
    public string boardtype { get; set; } = null!;

    private List<Board>? boards { get; set; }
    private Board board = new Board();
    public string content = string.Empty;
    public string category = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        id = await sessionStorage.GetItemAsStringAsync("loginfo");
        boards = await BoardService.GetBoardsAsync(boardtype);
    }

    public async Task SearchKeyword(){
        var result = await BoardService.GetBoardSearchAsync(content, category, boardtype);
        if(result != null){
            boards = result;
        }
    }
}
